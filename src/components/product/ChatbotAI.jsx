"use client"

import { useState, useEffect, useRef } from "react"
import { api } from "../../services/api.js"

export default function ChatbotAI({ isOpen, onClose, onProductClick, className }) {
  const [messages, setMessages] = useState([])
  const [input, setInput] = useState("")
  const [loading, setLoading] = useState(false)
  // eslint-disable-next-line no-unused-vars
  const [allProducts, setAllProducts] = useState([])
  const [isMinimized, setIsMinimized] = useState(false)
  const messagesEndRef = useRef(null)
  const inputRef = useRef(null)

  useEffect(() => {
    if (isOpen) {
      setMessages([
        {
          id: 1,
          text: "Ch√†o b·∫°n! üëã T√¥i l√† tr·ª£ l√Ω AI c·ªßa EduCommerce. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
          sender: "bot",
          timestamp: Date.now(),
        },
      ])
      fetchAllProducts()
    }
  }, [isOpen])

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    if (isOpen && !isMinimized && inputRef.current) {
      inputRef.current.focus()
    }
  }, [isOpen, isMinimized])

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  const fetchAllProducts = async () => {
    try {
      const productsData = await api.getProducts()
      setAllProducts(productsData.data)
    } catch (error) {
      console.error("Error fetching all products for chatbot:", error)
    }
  }

  const handleSendMessage = async (e) => {
    e.preventDefault()
    if (input.trim() === "" || loading) return

    const userMessage = { id: Date.now(), text: input, sender: "user", timestamp: Date.now() }
    setMessages((prevMessages) => [...prevMessages, userMessage])
    const currentInput = input
    setInput("")
    setLoading(true)

    try {
      await new Promise((resolve) => setTimeout(resolve, 800))

      const response = await api.getChatbotResponse(currentInput, "")
      let responseText = response.message || "Vui l√≤ng ch·ªçn m·ªôt lƒ©nh v·ª±c c·ª• th·ªÉ, v√≠ d·ª•: 'kh√≥a h·ªçc ti·∫øng anh'."
      
      const botResponse = { 
        id: Date.now() + 1, 
        text: responseText, 
        sender: "bot", 
        timestamp: Date.now() 
      }
      setMessages((prevMessages) => [...prevMessages, botResponse])

      if (response.productSuggestion) {
        setMessages((prevMessages) => [
          ...prevMessages,
          { 
            id: Date.now() + 2, 
            type: "product_card", 
            product: response.productSuggestion, 
            sender: "bot", 
            timestamp: Date.now() 
          },
        ])
      }

    } catch (error) {
      console.error("Chatbot API error:", error)
      setMessages((prevMessages) => [
        ...prevMessages,
        { 
          id: Date.now() + 1, 
          text: "C√≥ l·ªói x·∫£y ra, nh∆∞ng ƒë·ª´ng lo! D∆∞·ªõi ƒë√¢y l√† g·ª£i √Ω kh√≥a h·ªçc ph·ªï bi·∫øn.", 
          sender: "bot", 
          timestamp: Date.now() 
        },
      ])
      
      try {
        const defaultResponse = await api.getChatbotResponse("G·ª£i √Ω kh√≥a h·ªçc ph·ªï bi·∫øn", "")
        const botDefaultResponse = { 
          id: Date.now() + 2, 
          text: defaultResponse.message, 
          sender: "bot", 
          timestamp: Date.now() 
        }
        setMessages((prevMessages) => [...prevMessages, botDefaultResponse])
        
        if (defaultResponse.productSuggestion) {
          setMessages((prevMessages) => [
            ...prevMessages,
            { 
              id: Date.now() + 3, 
              type: "product_card", 
              product: defaultResponse.productSuggestion, 
              sender: "bot", 
              timestamp: Date.now() 
            },
          ])
        }
      } catch (fallbackError) {
        console.error("Fallback error:", fallbackError)
      }
    } finally {
      setLoading(false)
    }
  }

  const handleProductCardClick = (product) => {
    onProductClick(product)
    setMessages((prev) => [
      ...prev,
      { id: Date.now(), text: `ƒê√£ m·ªü chi ti·∫øt kh√≥a h·ªçc "${product.name}" cho b·∫°n! üìö`, sender: "bot", timestamp: Date.now() },
    ])
  }

  const handleQuickAction = (action) => {
    setInput(action)
    inputRef.current?.focus()
  }

  const formatTime = (timestamp) => {
    return new Date(timestamp).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })
  }

  if (!isOpen) return null

  return (
    <div className={`fixed bottom-6 right-6 z-50 ${className}`}>
      <div className={`bg-white rounded-2xl shadow-2xl border border-gray-200 transition-all duration-300 ${isMinimized ? 'w-80 h-16' : 'w-96 h-[500px]'} flex flex-col`}>
        <div className="bg-blue-600 text-white px-6 py-4 rounded-t-2xl flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
              </svg>
            </div>
            <div>
              <h3 className="font-semibold text-sm">Tr·ª£ l√Ω AI</h3>
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                <span className="text-xs opacity-90">ƒêang tr·ª±c tuy·∫øn</span>
              </div>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <button onClick={() => setIsMinimized(!isMinimized)} className="p-1.5 hover:bg-white hover:bg-opacity-20 rounded-lg transition-colors" title={isMinimized ? "M·ªü r·ªông" : "Thu g·ªçn"}>
              <svg className={`w-4 h-4 transition-transform ${isMinimized ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            <button onClick={onClose} className="p-1.5 hover:bg-white hover:bg-opacity-20 rounded-lg transition-colors" title="ƒê√≥ng">
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        {!isMinimized && (
          <>
            <div className="flex-1 p-4 overflow-y-auto space-y-4" style={{ scrollbarWidth: 'thin' }}>
              {messages.length === 1 && (
                <div className="mb-4">
                  <p className="text-xs text-gray-500 text-center mb-3">M·ªôt s·ªë g·ª£i √Ω ƒë·ªÉ b·∫Øt ƒë·∫ßu:</p>
                  <div className="grid grid-cols-2 gap-2">
                    {[
                      "Kh√≥a h·ªçc programming",
                      "Kh√≥a h·ªçc english",
                      "Kh√≥a h·ªçc design", 
                      "Kh√≥a h·ªçc business",
                      "Kh√≥a h·ªçc art",
                      "Kh√≥a h·ªçc music",
                      "Kh√≥a h·ªçc photography",
                      "Kh√≥a h·ªçc marketing",
                      "Kh√≥a h·ªçc finance",
                      "Kh√≥a h·ªçc health",
                      "B·∫°n ƒëang c√≥ nh·ªØng kh√≥a h·ªçc n√†o",
                      "C√≥ nh·ªØng kh√≥a h·ªçc g√¨",
                      "Cho t√¥i danh s√°ch c√°c kh√≥a h·ªçc v·ªÅ ti·∫øng Anh",
                      "G·ª£i √Ω kh√≥a h·ªçc l·∫≠p tr√¨nh n√†o hay",
                      "T√¥i mu·ªën xem c√°c kh√≥a h·ªçc v·ªÅ thi·∫øt k·∫ø",
                      "C√≥ kh√≥a h·ªçc n√†o v·ªÅ kinh doanh kh√¥ng",
                      "Li·ªát k√™ c√°c kh√≥a h·ªçc nhi·∫øp ·∫£nh",
                      "Kh√≥a h·ªçc marketing n√†o ƒëang c√≥ tr√™n trang web",
                      "Cho t√¥i xem c√°c kh√≥a h·ªçc v·ªÅ s·ª©c kh·ªèe",
                      "T√¥i mu·ªën h·ªçc v·ªÅ t√†i ch√≠nh, c√≥ kh√≥a h·ªçc n√†o ph√π h·ª£p",
                      "G·ª£i √Ω kh√≥a h·ªçc ngh·ªá thu·∫≠t n√†o t·ªët",
                      "C√≥ kh√≥a h·ªçc √¢m nh·∫°c n√†o kh√¥ng",
                      "T√¥i mu·ªën h·ªçc c√°ch n√≥i ti·∫øng Anh l∆∞u lo√°t",
                      "C√≥ kh√≥a h·ªçc n√†o d·∫°y v·∫Ω tranh ho·∫∑c s√°ng t·∫°o ngh·ªá thu·∫≠t kh√¥ng",
                      "T√¥i mu·ªën h·ªçc ch∆°i guitar ho·∫∑c s√°ng t√°c nh·∫°c",
                      "C√≥ kh√≥a h·ªçc n√†o d·∫°y vi·∫øt code ho·∫∑c ph√°t tri·ªÉn ph·∫ßn m·ªÅm kh√¥ng",
                      "T√¥i mu·ªën h·ªçc thi·∫øt k·∫ø ƒë·ªì h·ªça ho·∫∑c giao di·ªán web",
                      "C√≥ kh√≥a h·ªçc n√†o v·ªÅ kh·ªüi nghi·ªáp ho·∫∑c qu·∫£n l√Ω doanh nghi·ªáp kh√¥ng",
                      "T√¥i mu·ªën t√¨m hi·ªÉu v·ªÅ dinh d∆∞·ª°ng ho·∫∑c chƒÉm s√≥c s·ª©c kh·ªèe",
                      "C√≥ kh√≥a h·ªçc n√†o d·∫°y c√°ch qu·∫£n l√Ω ti·ªÅn b·∫°c ho·∫∑c ƒë·∫ßu t∆∞ kh√¥ng",
                      "T√¥i mu·ªën h·ªçc ch·ª•p ·∫£nh chuy√™n nghi·ªáp ho·∫∑c ch·ªânh s·ª≠a ·∫£nh",
                      "C√≥ kh√≥a h·ªçc n√†o v·ªÅ qu·∫£ng c√°o ho·∫∑c ti·∫øp th·ªã s·ªë kh√¥ng"
                    ].map((suggestion, index) => (
                      <button key={index} onClick={() => handleQuickAction(suggestion)} className="p-2 text-xs bg-gray-50 hover:bg-gray-100 rounded-lg border border-gray-200 transition-colors text-left">
                        {suggestion}
                      </button>
                    ))}
                  </div>
                </div>
              )}

              {messages.map((msg) => (
                <div key={msg.id} className={`flex ${msg.sender === "user" ? "justify-end" : "justify-start"}`}>
                  <div className={`flex items-end gap-2 max-w-[80%] ${msg.sender === "user" ? "flex-row-reverse" : ""}`}>
                    {msg.sender === "bot" && (
                      <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
                        <span className="text-xs">ü§ñ</span>
                      </div>
                    )}
                    <div className="flex flex-col">
                      <div className={`px-4 py-2 rounded-2xl ${msg.sender === "user" ? "bg-blue-600 text-white rounded-br-md" : "bg-gray-100 text-gray-800 rounded-bl-md"}`}>
                        {msg.type === "product_card" ? (
                          <ProductCardForChatbot product={msg.product} onProductClick={handleProductCardClick} />
                        ) : (
                          <p className="text-sm leading-relaxed whitespace-pre-line">{msg.text}</p>
                        )}
                      </div>
                      <span className={`text-xs text-gray-400 mt-1 ${msg.sender === "user" ? "text-right" : ""}`}>
                        {formatTime(msg.timestamp)}
                      </span>
                    </div>
                  </div>
                </div>
              ))}

              {loading && (
                <div className="flex justify-start">
                  <div className="flex items-end gap-2">
                    <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center">
                      <span className="text-xs">ü§ñ</span>
                    </div>
                    <div className="bg-gray-100 px-4 py-3 rounded-2xl rounded-bl-md">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: "0s" }}></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: "0.4s" }}></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>

            <div className="p-4 border-t border-gray-100">
              <form onSubmit={handleSendMessage} className="flex items-end gap-3">
                <div className="flex-1">
                  <input
                    ref={inputRef}
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="Nh·∫≠p tin nh·∫Øn..."
                    className="w-full px-4 py-2 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none text-sm"
                    disabled={loading}
                    maxLength={500}
                  />
                </div>
                <button
                  type="submit"
                  disabled={loading || !input.trim()}
                  className="p-2 bg-blue-600 text-white rounded-xl hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex-shrink-0"
                  title="G·ª≠i tin nh·∫Øn"
                >
                  {loading ? (
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  ) : (
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                  )}
                </button>
              </form>
              <div className="flex justify-between items-center mt-2">
                <span className="text-xs text-gray-400">Nh·∫•n Enter ƒë·ªÉ g·ª≠i</span>
                <span className="text-xs text-gray-400">{input.length}/500</span>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  )
}

function ProductCardForChatbot({ product, onProductClick }) {
  const formatPrice = (price) => new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND", minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(price)

  return (
    <div className="bg-white rounded-lg border border-gray-200 overflow-hidden cursor-pointer hover:shadow-md transition-all duration-200 max-w-xs" onClick={() => onProductClick(product)}>
      <div className="relative">
        <img
          src={`/images/${product.category?.toLowerCase()}.jpg`}
          alt={product.name}
          onError={(e) => { e.currentTarget.src = "/placeholder.svg?height=100&width=200" }}
          className="w-full h-24 object-cover"
        />
        <div className="absolute top-2 left-2">
          <span className="bg-blue-600 text-white text-xs px-2 py-1 rounded-full font-medium">G·ª£i √Ω AI</span>
        </div>
      </div>
      <div className="p-3">
        <h4 className="font-semibold text-gray-900 text-sm mb-1 line-clamp-1">{product.name}</h4>
        <p className="text-gray-600 text-xs line-clamp-2 mb-2">{product.shortDescription}</p>
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center gap-1">
            <svg className="w-3 h-3 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
            </svg>
            <span className="text-xs text-gray-600">{product.rating}</span>
          </div>
          <span className="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full">{product.category}</span>
        </div>
        <div className="flex items-center justify-between">
          <span className="text-sm font-bold text-blue-600">{formatPrice(product.price)}</span>
          <button className="text-blue-600 hover:text-blue-700 text-xs font-medium flex items-center gap-1">
            Xem chi ti·∫øt
            <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  )
}